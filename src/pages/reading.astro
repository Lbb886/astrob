---
import Layout from '~/layouts/PageLayout.astro';
import Headline from '~/components/blog/Headline.astro';
import { SITE } from '~/config.mjs';
import { books } from '../books.js';

const meta = {
  title: `Reading`,
  description: SITE.description
};

const allCategories = ['All', ...new Set(
  books.map(book => book.category.trim())
    .filter(category => category !== '')
)];

const renderRatingStars = (rating) => {
  if (rating < 0 || rating > 5 || isNaN(rating)) {
    return '评分无效';
  }

  const filledStars = Math.floor(Number(rating));
  const hasHalfStar = Number(rating) % 1 !== 0;

  return '★'.repeat(filledStars) + (hasHalfStar ? '☆' : '');
};

books.sort((a, b) => new Date(b.startAt) - new Date(a.startAt));

const renderStatus = (book) => {
  if (book.endAt) {
    return '已读';
  }

  const currentDate = new Date();
  const startDate = new Date(book.startAt);
  const timeDiff = Math.abs(currentDate.getTime() - startDate.getTime());
  const days = Math.ceil(timeDiff / (1000 * 3600 * 24));
  return days > 365 ? '弃书' : '在读';
};
---

<Layout meta={meta}>
  <section class="page">
    <Headline>读过的书</Headline>
    <div class="mb-6 flex flex-wrap gap-4" id="categories-container">
      {allCategories.map((category, index) => (
        <a
          key={index}
          href="#"
          class={`tab ${category === 'All' ? 'active' : ''}`}
          data-category={category.toLowerCase().replace(' ', '-')}
        >
          <span>{category}</span>
        </a>
      ))}
    </div>
    <div id="books-container" class="grid gap-6 md:grid-cols-2">
      {books.map((book, index) => (
        <article
          key={index}
          class={`p-4 border rounded-lg shadow-md book-item ${book.category.toLowerCase().replace(' ', '-')}`}
          data-category={book.category.toLowerCase().replace(' ', '-')}
        >
          <div class="flex">
            <img
              class="w-32 h-48 object-cover rounded mb-4 mr-4"
              src={book.data.cover_url}
              alt={book.name}
              loading="lazy"
              referrerpolicy="no-referrer"
            />
            <div class="flex flex-col flex-grow">
              <div class="text-sm text-gray-600 grid gap-y-2">
                <a href={book.data.url} target="_blank" rel="noopener noreferrer" class="text-lg font-semibold mb-2 text-primary hover:underline">{book.name}</a>
                {book.originalName && <p><span class="text-neutral-500">原作名: </span>{book.originalName}</p>}
                {book.author && <p><span class="text-neutral-500">作者: </span>{book.author}</p>}
                <p><span class="text-neutral-500">豆瓣评分: </span>{book.data.rating.value}</p>
                <p><span class="text-neutral-500">主观评分: </span>{renderRatingStars(book.rate)}</p>
                <p><span class="text-neutral-500">阅读时间: </span>{book.startAt}</p>
                <p><span class="text-neutral-500">阅读状态: </span>{renderStatus(book)}</p>
              </div>
            </div>
          </div>
          <div class="mt-auto prose dark:prose-invert">{book.comments}</div>
        </article>
      ))}
    </div>
  </section>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const categoryLinks = document.querySelectorAll('#categories-container .tab');

      // Add click event listener to each category link
      categoryLinks.forEach(link => {
        link.addEventListener('click', function(event) {
          event.preventDefault();

          // Remove active class from all links
          categoryLinks.forEach(link => link.classList.remove('active'));

          // Add active class to the clicked tab
          this.classList.add('active');

          // Get the category from data attribute
          const category = this.dataset.category;

          // Filter books based on category
          const articles = document.querySelectorAll('.book-item');
          articles.forEach(article => {
            const articleCategory = article.dataset.category;
            article.style.display = (category === 'all' || articleCategory === category) ? 'block' : 'none';
          });
        });
      });

      // Initially display all books
      const articles = document.querySelectorAll('.book-item');
      articles.forEach(article => {
        article.style.display = 'block';
      });
    });
  </script>
</Layout>
