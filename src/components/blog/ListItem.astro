---
import PostTags from '~/components/blog/Tags.astro';

import { BLOG } from '~/config.mjs';
import type { Post } from '~/types';

import { getPermalink } from '~/utils/permalinks';
import { findImage } from '~/utils/images';
import { getFormattedDate } from '~/utils/utils';

export interface Props {
  post: Post;
  showImage?: boolean;
  showTag?: boolean;
}

const { post, showImage = true, showTag = false } = Astro.props;
const image = await findImage(post.image);
const link = !BLOG?.post?.disabled ? getPermalink(post.permalink, 'post') : '';
---

<article class="flex mx-auto gap-6 md:gap-8 hover:bg-neutral-50 dark:hover:bg-slate-800 rounded-lg px-2 py-4 transition-transform ease-in-out hover:scale-105">
  <div class={`flex flex-col justify-between w-full ${showImage && image ? 'md:w-2/3' : ''}`}>
    <div class="mt-1">
      <span class="text-sm leading-6 mb-1 text-slate-700 dark:text-slate-400">
        <time datetime={String(post.publishDate)}>{getFormattedDate(post.publishDate)}</time>
        {post.category && Array.from(post.category).map((category) => (
          <>
            {' '}Â·{' '}
            <a class="capitalize hover:underline" href={getPermalink(category, 'category')}>
              {category.replaceAll('-', ' ')}
            </a>
          </>
        ))}
      </span>

      <a href={link}>
        <h2 class="text-xl sm:text-2xl font-bold leading-tight mb-2 font-heading dark:text-slate-300">
          {post.title}
        </h2>
        {(post.excerpt || post.description) && (
          <p class="text-muted dark:text-slate-400 text-lg">
            {post.excerpt || post.description}
          </p>
        )}
        {showTag && (
          <footer class="mt-2">
            <PostTags tags={post.tags} />
          </footer>
        )}
      </a>
    </div>
  </div>
  {showImage && image && (
    <a class="relative hidden md:block w-48 h-32 ml-auto overflow-hidden" href={link ?? 'javascript:void(0)'}>
      <img
        src={image}
        class="object-cover w-full h-full rounded border"
        alt={post.title}
        loading="lazy"
        decoding="async"
      />
    </a>
  )}
</article>
